{"version":3,"sources":["components/Online.js","config.js","components/api.js","components/App.js","serviceWorker.js","index.js","img/online.ico","img/offline.ico"],"names":["Online","props","online","className","Promise","resolve","reject","request","XMLHttpRequest","open","config","timeout","onload","ontimeout","onerror","send","App","state","interval","this","checkOnline","setInterval","a","setState","clearInterval","Component","that","api","status","document","querySelector","href","favonline","favoffline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.46386e51.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Online(props)\r\n{\r\n\tconst {online} = props;\r\n\r\n\tif (online) // online: true\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className={'yes'}>\r\n\t\t\t\tYes.\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\telse if (online === false) // online: false\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className={'no'}>\r\n\t\t\t\tNo.\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn ( // online: null\r\n\t\t<div className={'checking'}>\r\n\t\t\t...\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Online;","export default {\r\n\tendpoint: 'https://h2o22yvohk.execute-api.eu-west-1.amazonaws.com/prod/online', // We Could also use an network change event instead but then our api would be totally useless! :(\r\n\ttimeout: 1000 * 2, // Timeout for http request in ms\r\n\tinterval: 1000 * 10, // Check every ms for an connection\r\n};","import config from '../config';\r\n\r\nconst checkConnection = () =>\r\n{\r\n\treturn new Promise((resolve, reject) =>\r\n\t{\r\n\t\tlet request = new XMLHttpRequest();\r\n\t\trequest.open('GET', config.endpoint);\r\n\t\trequest.timeout = config.timeout;\r\n\t\trequest.onload = () =>\r\n\t\t{\r\n\t\t\tresolve(true);\r\n\t\t};\r\n\r\n\t\trequest.ontimeout = () =>\r\n\t\t{\r\n\t\t\tresolve(false);\r\n\t\t};\r\n\r\n\t\trequest.onerror = () =>\r\n\t\t{\r\n\t\t\tresolve(false);\r\n\t\t};\r\n\r\n\t\trequest.send(null);\r\n\t});\r\n};\r\n\r\nexport default {\r\n\tcheckConnection,\r\n};","import React, {Component} from 'react';\nimport Online from './Online';\nimport api from './api';\nimport config from '../config';\nimport favonline from '../img/online.ico';\nimport favoffline from '../img/offline.ico';\n\nclass App extends Component\n{\n\n\tstate = {\n\t\tonline: null,\n\t\tinterval: null,\n\t};\n\n\trender()\n\t{\n\t\treturn (\n\t\t\t<div className={'container'}>\n\t\t\t\t<div className={'question'}>\n\t\t\t\t\tAm I Online ?\n\t\t\t\t</div>\n\t\t\t\t<div className={'answer'}>\n\t\t\t\t\t<Online online={this.state.online}/>\n\t\t\t\t</div>\n\t\t\t\t<div className={'notice'}>\n\t\t\t\t\tThis app works Offline too !\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tcheckOnline(this);\n\n\t\tconst interval = setInterval(async () =>\n\t\t{\n\t\t\tcheckOnline(this);\n\t\t}, config.interval);\n\n\t\tthis.setState({interval});\n\t}\n\n\tcomponentWillUnmount()\n\t{\n\t\tclearInterval(this.state.interval);\n\t}\n}\n\n/**\n * Function to check and set the online state, also sets the favicon dynamically\n * @param that this\n * @returns {Promise<void>}\n */\nconst checkOnline = async (that) =>\n{\n\tconst status = await api.checkConnection();\n\n\tlet link = document.querySelector('link[rel*=\\'icon\\']');\n\tif (status)\n\t{\n\t\tlink.href = favonline;\n\t}\n\telse\n\t{\n\t\tlink.href = favoffline;\n\t}\n\n\tthat.setState({online: status});\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/online.ee3ef083.ico\";","module.exports = __webpack_public_path__ + \"static/media/offline.fd927235.ico\";"],"sourceRoot":""}